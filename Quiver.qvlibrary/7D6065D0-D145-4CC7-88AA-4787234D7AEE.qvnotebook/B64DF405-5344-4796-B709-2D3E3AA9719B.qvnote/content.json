{
  "title": "Pre-Reading - ORM & Squelize - Wikistacks",
  "cells": [
    {
      "type": "text",
      "data": "<h3>Sequelize Syntax -&nbsp;<a href=\"http://docs.sequelizejs.com/manual/installation/getting-started.html\">http://docs.sequelizejs.com/manual/installation/getting-started.html</a></h3><div><ul><li>is a promise-based ORM for Node.js v4 and up</li><li>supports the dialects PostgreSQL, MySQL, SQLite and MSSQL and features solid transaction support, relations, read replication and more</li></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3>Install Sequelize</h3><div><code>​// using NPM</code><br></div><div><code>$ npm install —save sequelize</code></div><div><code><br></code></div><div><code>// and add one of the following dialects sequelize supports</code></div><div><code>$ npm install —save pg pg-hstore</code></div><div><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\">$ npm install —save mysq12</span><br></div><div><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\">$ npm install —save sqlite3</span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\"><br></span></div><div><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\">$ npm install —save tedious // MSSQL</span><br></div>"
    },
    {
      "type": "text",
      "data": "<h3>Setting up a connection</h3><div><code>​// sequelize will setup a connection pool on initialization, so ideally only ever create one instance per database. if connecting to multiple db from multiple processes, create one instance per process</code><br></div><div><code><br></code></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">const sequelize = new Sequelize(‘database’,&nbsp;‘username’,&nbsp;‘password’, {</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; h</span>ost:&nbsp;‘localhose’,</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; dialect:&nbsp;‘mysql’ |&nbsp;‘sqlite’ |&nbsp;‘postgres’ |&nbsp;‘mssql’,</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><br></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; pool: {</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp; max: 5,</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp;&nbsp;Min: 0,</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp;&nbsp;Idle: 10000</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; },</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><br></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; // SQLite only</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp;&nbsp;Storage:&nbsp;‘path/to/database.sqlite’</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">});</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><br></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">// or simply use a connection URI</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">const sequelize = new Sequelize(‘Postgres://user:pass@example.com:5432/dbname');</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><br></font></div>"
    },
    {
      "type": "text",
      "data": "<h3>Test the connection</h3><div><code>​// use .authenticate() function to test connection</code><br></div><div><code><br></code></div><div><code>Sequelize</code></div><div><code>&nbsp; .authenticate()</code></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; .then() =&gt; {</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; &nbsp; console.log(‘Connection has been established successfully.’);</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; })</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; .catch(err =&gt; {</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; &nbsp; console.error(‘Unable to connect to the database:’, err);</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; });</span></font></div>"
    },
    {
      "type": "text",
      "data": "<h3>Your First Model</h3><div><ul><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\">​</span><code>​</code><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace; font-size: 16.200000762939453px; background-color: rgba(0, 0, 0, 0.0392157);\">​</span><code>​</code>​Models are defined with&nbsp;<code>​sequelize.define(‘name’, {attributes}, {options}).</code><br></li></ul><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\"><code><font size=\"3\">​const User = sequelize.define(</font><span style=\"font-size: 14.399999618530273px;\">‘</span><font size=\"3\">user’, {</font></code><br></font></div></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; firstName: {</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; &nbsp; t</span>ype: Sequelize.STRING</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; },</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; lastName: {</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp; type: Sequelize.STRING</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; }</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">}):</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><br></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">// force: true will drop the table if it already exists</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">User.sync({force:true})</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">.then(() =&gt; {</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; // Table created</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; return User.create( {</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp; firstName:&nbsp;‘John’,</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; &nbsp; lastName:&nbsp;‘Hancock’</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">&nbsp; });</font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\">});</font></div>"
    },
    {
      "type": "text",
      "data": "<h3>Your First Query</h3><div><code>​User.findAll()</code><br></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">.then(users =&gt; {</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">&nbsp; console.log(users)</span></font></div><div><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"3\"><span style=\"background-color: rgba(0, 0, 0, 0.0392157);\">})</span></font></div>"
    },
    {
      "type": "text",
      "data": "<h3><hr>What is ORM? -&nbsp;<a href=\"https://stackoverflow.com/questions/1279613/what-is-an-orm-and-where-can-i-learn-more-about-it/1279678#1279678\" style=\"font-size: 18px;\">https://stackoverflow.com/questions/1279613/what-is-an-orm-and-where-can-i-learn-more-about-it/1279678#1279678</a></h3><div><ul><li>Object-Relational Mapping - is a technique that lets you query and manipulate data from a database using an object-oriented paradigm</li><li>when talking about ORM, most are referring to a library that implements the ORM technique, hence the ORM</li></ul></div>"
    }
  ]
}