{
  "title": "Week 1 - Concept Review",
  "cells": [
    {
      "type": "text",
      "data": "<span id=\"docs-internal-guid-c09a010a-a4b4-26b3-ec92-323cf4c6f125\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">KEY CONCEPTS OF WEEK 1: </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">1 - Object Creation &amp; Inheritance </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2 - Closures </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3 - Determining THIS</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">4 - The DOM</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Recommended Readings: &nbsp;</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">1 - </span><a href=\"http://www.domenlightenment.com/\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">DOM Enlightenment</span></a></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2 - </span><a href=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_browsers_we_will_talk_about\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">How Browsers Work</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> &nbsp;</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3 - </span><a href=\"http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">What Is The Execution Context?</span></a></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">4 - </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Effective JavaScript</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by David Herman</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">5 - </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The Principles of Object Oriented JavaScript</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by Nicholas C. Zakas</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">6 - </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">JavaScript: The Good Parts</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by Douglas Crockford</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">7 - </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">JavaScript: The Definitive Guide</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by David Flanagan</span></p><br><ol style=\"margin-top:0pt;margin-bottom:0pt;\"><li dir=\"ltr\" style=\"list-style-type: decimal; font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 18pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">OBJECT CREATION &amp; INHERITANCE</span></p></li></ol><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">This week we reviewed data structures. Much of the discomfort many of you felt had little to do with your understanding of what a linked list or a queue or a hash is. In fact, most of you could articulately describe how these structures work. The data structures workshop is difficult because it forces you to leverage what we’ve taught you about object creation to codify your mental models. That’s why the most important concept to review this weekend is object creation. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Classical Inheritance: </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">JavaScript Programmers often use the term ‘classical inheritance’ when describing a type of inheritance that emulates the class-based system of languages like Java (remember, many programming languages have the notion of ‘classes’ as blueprints for objects). JavaScript doesn’t have classes, so the term ‘Classical Inheritance’ can be misleading. Objects in JavaScript are just key-value pairs, which you can create and change at any time. </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">However, JavaScript does have the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator, which, when invoked with a function (we call functions invoked with the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">constructor functions</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">), achieves functionality that is very similar to the functionality produced by the class syntax of other languages. Note that the term </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">constructor functions</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> is misleading: any function can be used as a constructor function. Constructors are just functions that happen to be called with the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator in front of them; they are not special types of functions; they’re just regular functions that are, in essence, simply hijacked by the use of the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator in their invocation. To quote JavaScript ninja Kyle Simpson, “there’s no such thing as ‘constructor functions’, but rather construction calls </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">of </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">functions.”</span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">So, to get back to how Java has classes and JavaScript doesn’t, in Java you can do this: </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Person adam = new Person(); </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">In JavaScript, you can do this: </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">var adam = new Person(); </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">This construction call of the ‘Person’ function makes Person seem like a class but in fact it is just a function. Keep this in mind as you study. Also remember that ‘Classical Inheritance’ in JavaScript refers to a host of methods by which programmers combine functions with the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator in order to make object A’s functionality available to object B. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The NEW Operator Does 4 Things: </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">1 - It creates a new object. The </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> operator essentially endows a function with the power to construct an object. </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2 - It sets this new object’s internal [[prototype]] property to be the constructor function’s external, accessible, prototype object (every function object automatically has a prototype property that is itself an object). An object’s internal [[prototype]] property creates the linkage by which method retrieval via the prototype chain occurs. There are only three ways to determine what an object’s internal [[prototype]] property points to: </span></p><ol style=\"margin-top:0pt;margin-bottom:0pt;\"><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">.__proto__: this is both a setter and getter function that exposes the value of the internal [[prototype]] of an object. We can think of .__proto__ as the public link that corresponds to the private [[prototype]] link. </span></p></li><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.getPrototypeOf(</span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">)</span></p></li><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">.constructor.prototype (if neither the constructor nor the prototype properties have been modified. This is the least reliable way to retrieve the value of the [[prototype]] property.</span></p></li></ol><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this </span><a href=\"https://gist.github.com/awilson28/a75f8ad1d8900ebe85b5\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">gist</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3 - It executes the constructor function, using the newly created object whenever </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">this </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">is mentioned (in order to pass on the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">own </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">properties of the constructor function to the newly created object). In other words, the newly constructed object is set as the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">this </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">binding for that function call. </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">4 - It returns the newly created object, unless the constructor function returns a non-primitive value (i.e. unless it returns its own alternate object). In this case, that non-primitive value will be returned.</span></p><br><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Every object has this internal property called </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">[[prototype]]; .__proto__</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> is the publicly available accessor for this internal property. .__proto__ is controversially used because it is not a standard accessor. ES6 is standardizing .__proto__. The internal [[prototype]] property is set at object creation time, either with </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">, with </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.create</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">, or based on the object literal ({}) which defaults to Object. </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the gist: </span><a href=\"https://gist.github.com/awilson28/b8984c1d246c2c62713f\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Classical Inheritance</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Prototypal Inheritance</span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Prototypal Inheritance does not try to emulate the class system. Objects inherit from other objects. You take an object that you’d like to reuse and then you create a second object that gets its functionality from the first one. </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Most prototypal inheritance methods combine object literal notation with </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.create() </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">to transfer functionality. </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The Object.create() Method Does 3 Things: </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">1 - It creates a new object. The </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.create() method </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">takes one required argument: the object that should be the prototype of the newly-created object. The second, optional argument is an object that sets properties typically fed to Object.defineProperties(). &nbsp;</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2 - It sets this new object’s internal [[prototype]] property to be the constructor function’s external, accessible, prototype object (every function object automatically has a prototype property that is itself an object). An object’s internal [[prototype]] property creates the linkage by which method retrieval via the prototype chain occurs. </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">There are only three ways to determine what an object’s internal [[prototype]] property points to: </span></p><ol style=\"margin-top:0pt;margin-bottom:0pt;\" start=\"4\"><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">.__proto__: this is both a setter and getter function that exposes the value of the internal [[prototype]] of an object. We can think of .__proto__ as the public link that corresponds to the private [[prototype]] link. </span></p></li><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.getPrototypeOf(</span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">): this method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object. So </span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">is the object whose internal prototype property is to be returned. </span></p></li><li dir=\"ltr\" style=\"list-style-type: lower-alpha; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">someObject</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">.constructor.prototype (if neither the constructor nor the prototype properties have been modified. This is the least reliable way to retrieve the value of the [[prototype]] property.</span></p></li></ol><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3 - It returns the newly created object, unless the constructor function returns a non-primitive value (i.e. unless it returns its own alternate object). In this case, that non-primitive value will be returned.</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">If these three things look familiar it’s because they are the same as 1, 2, &amp; 4 from the list of things that the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator does. Unlike the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">operator, Object.create() does not execute a constructor function with the newly created object (thereby giving it own properties). </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this gist on </span><a href=\"https://gist.github.com/awilson28/43dbdb533ac5f0bfee00\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Object.create()</span></a></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the gist on </span><a href=\"https://gist.github.com/awilson28/0402eeb3e46a5f585655\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Prototypal Inheritance </span></a></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Explaining [[Prototype]]</span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Perhaps the most critical operation that both </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Object.create()</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> and the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> operator perform is that of linking the newly created and returned object’s internal [[prototype]] property to the passed in object (in the case of Object.create()) or to the constructor function’s prototype property (in the case of the new operator). This link between the new object’s [[prototype]] and the source object’s prototype object is key.</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> An object’s internal [[prototype]] property creates the linkage by which method retrieval via the prototype chain occurs. When attempting a property access on an object that doesn’t have that property, the object’s internal [[prototype]] linkage defines where the [[Get]] operation will look next. This cascading linkage from object to object essentially defines a ‘prototype chain’ (which is an analog to a nested scope chain in many ways) of objects to traverse for property resolution. All normal objects have the built-in Object.prototype as the top of the prototype chain (like the global scope in the scope lookup), where property resolution will stop will stop if not found anywhere prior in the chain. toString(), valueOf(), and other common utilities exist on this Object.prototype object, explaining how all objects in the language are able to access them.</span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">If you’re still uncomfortable with object inheritance after reviewing these gists, check out </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">ObjectPlayground.com</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> and explore various diagrams that they include on their page. &nbsp;Also check out </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Principles of Object Oriented JavaScript</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by Nicholas C. Zakas. </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2. CLOSURES</span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Closures are functions that keep track of variables from their containing/enclosing scopes. In other words, closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope. </span></p><p dir=\"ltr\" style=\"line-height:1.4567563663829428;margin-top:0pt;margin-bottom:11pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Three basic things to keep in mind: </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">1 - JavaScript allows you to refer to variables that were defined outside of the current function. This is referred to as </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">lexical scoping</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. A function’s lexical scope is determined by the scope in which it is defined. In other words, functions run in the scope in which they are defined, not the scope from which they are executed. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this diagram of lexical scope: </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><img src=\"quiver-image-url/3418E212108812BA304653F5631BB5A6.png\" width=\"650\" height=\"280\" style=\"border: none; transform: rotate(0.00rad); -webkit-transform: rotate(0.00rad);\"></span></p><br><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The global object is the top level scope, which is shared by all scripts. So in this diagram, Script 2 is imported. And if Script 2 has a variable y in its global scope and Script 1 has a variable y in its global scope, whichever script is imported last sets the value of y. This is why global variables are bad: they pollute the global space and are vulnerable to being overridden by third-party scripts you import. More on this in another concept review. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The main point here is that functions can access variables from their enclosing scopes because of the lexical scoping nature of JavaScript. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">2 - Closures refer to variables defined in outer, enclosing functions </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">even after</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> those outer functions have returned (returned is equivalent to ‘exiting’)</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. Thus, closures outlive the functions that made them. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3 - Closures </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">store references</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> to variables defined within their enclosing scopes rather than copying their values. So any changes to these variables are accessible to the closure. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Another programmer way of thinking about this is that whenever a function is defined, the JavaScript engine keeps a reference to all the variables currently available in scope that the function references. &nbsp;Then, even if the outer function exits, those references to the variables remain and don’t allow the JavaScript garbage collector to delete them. &nbsp;This is how JavaScript function closures keep access to the variables that are in scope when they are defined.</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this </span><a href=\"https://gist.github.com/awilson28/0f25c22513f8499ce8ee\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">gist</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> that demonstrates closure</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">3. </span><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">DETERMINING </span><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 255); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> ALL THE TIME, EVERYWHERE</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">In order to know the value of THIS, you must inspect the invocation context, which is the location in code where a function is called (NOT where the code is declared. Recall that the lexical scope of a function is defined by where that function is declared. This is not true for THIS; THIS is controlled by the invocation context. There is absolutely NO connection between the lexical context and the invocation context which means that there is no connection between THIS and lexical scope). Only by inspecting the invocation context can we answer the question: what object is THIS pointing to? </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Just to make sure we’re all clear - </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">This is a function declaration: </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">function foo() {</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">console.log(‘this’, this)</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">//this definition has nothing to do with the value of THIS</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">}</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">And this is how we invoke foo: </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">foo()</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">//this invocation has EVERYTHING to do with the value of THIS</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">A function declaration is an assignment - we give </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">foo</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> a value. Simply giving a function a value doesn’t invoke it! The console.log will not appear as a result of the declaration. Invoking the function triggers the console.log. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Determining the invocation context is not always as simple as locating where a function is called because certain coding patterns obfuscate the true invocation context. We can inspect the invocation context by using the call-stack (the stack of functions that have been called to get us to the current moment in execution). </span></p><br><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Let’s check out some code that demonstrates the call-stack and call-site (start by looking at the bottom where function baz is invoked!): </span></p><br><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">function baz() {</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">//call-stack is: `baz` so, our invocation context is the global scope</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">console.og(‘baz’); </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">bar(); // the invocation context for `bar` is `baz`</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">}</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">function bar() {</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">// call-stack is `baz` → `bar`</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">console.log(‘bar’); </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">foo(); // the invocation context for `foo` is `bar`</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">}</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">function foo() {</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">//call-stack is: `baz` → &nbsp;`bar` → `foo`</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">console.log(‘foo’)</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">}</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">baz(); // the invocation context for `baz` is the window</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">By looking at the chain of function calls in order, we can visualize the call stack. The easiest ways to do this in your console are by 1) inserting the debugger and 2) setting a breakpoint in the tools. These tools will show you a list of the functions that have been called to get to that line, which is your call-stack. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this </span><a href=\"https://gist.github.com/awilson28/aa0f34eab74a8202236a\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">gist</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> to see an example of the </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> confusion before learning about the four rules for determining the value of </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">So How Does The Invocation Context Determine THIS?</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Four rules govern the value that the invocation context assigns to </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS. </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">We’ve listed these rules in order of precedence (that is, new binding overrides explicit/hard binding which overrides implicit binding which overrides default binding). Keep in mind, though, that you’ll most frequently encounter 3 and 4, which are implicit and default binding, respectively. Here are 4 the rules: </span></p><br><ol style=\"margin-top:0pt;margin-bottom:0pt;\"><li dir=\"ltr\" style=\"list-style-type: decimal; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Is the function called with </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">(a.k.a. </span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">new binding</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">)? If so, </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">is the newly constructed object. </span></p></li></ol><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">var bar = new foo()</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the </span><a href=\"https://gist.github.com/awilson28/85b93a85c2b5eaa54eae\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">New Binding</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> gist</span></p><br><ol style=\"margin-top:0pt;margin-bottom:0pt;\" start=\"2\"><li dir=\"ltr\" style=\"list-style-type: decimal; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Is the function called with </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">call(), apply() or bind()</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> (a.k.a. </span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">explicit/hard binding</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">)? If so, </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">is the explicitly specified object. We use explicit binding when we want to force a function call to use a particular object for the </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> binding without putting a property function reference on the object. </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">NOTE: call(), apply() and bind() are built-in JavaScript methods that explicitly set the object to which THIS points. </span></p></li></ol><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">var bar = foo.call( obj2 )</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;text-align: center;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the </span><a href=\"https://gist.github.com/awilson28/62bbb8b094f0d86d3b88\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Explicit Binding</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> &amp; </span><a href=\"https://gist.github.com/awilson28/dfba6aa16412a9cdc92f\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Explicit Binding w/ bind()</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> gists and then compare </span><a href=\"https://gist.github.com/awilson28/b82ec21c7b2635f978bb\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Explicit Binding to New Binding</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> and see how </span><a href=\"https://gist.github.com/awilson28/b9ec50424cb320b1d38e\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">bind overrides call &amp; apply</span></a></p><br><ol style=\"margin-top:0pt;margin-bottom:0pt;\" start=\"3\"><li dir=\"ltr\" style=\"list-style-type: decimal; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Is the function called with a context (a.k.a. </span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">implicit binding</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">), otherwise known as </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">an owning or containing object</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">? If so, </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">is </span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">that </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">context object. With implicit binding, most of the time, </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> is set by whatever object appears before the dot (obj1 in this example).</span></p></li></ol><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">var bar = obj1.foo(); </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the </span><a href=\"https://gist.github.com/awilson28/162fe27c9b028058a1fd\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Implicit Binding</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> gist and then see how explicit binding overrides implicit binding </span><a href=\"https://gist.github.com/awilson28/c1847358f18964b8435d\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">here</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. </span></p><br><ol style=\"margin-top:0pt;margin-bottom:0pt;\" start=\"4\"><li dir=\"ltr\" style=\"list-style-type: decimal; font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; margin-left: 18pt;\"><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;\"><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> Otherwise, default the </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS </span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">(</span><span style=\"font-size: 11pt; font-style: italic; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">default binding</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">). Most function calls occur in the window: they’re standalone function invocations. If in strict mode, the default </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> is set to </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">undefined</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">; if not in strict mode, the default </span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">THIS</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> is set to the</span><span style=\"font-size: 11pt; font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> global object</span><span style=\"font-size: 11pt; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">. </span></p></li></ol><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"><span class=\"Apple-tab-span\" style=\"white-space:pre;\">\t</span></span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">var bar = foo();</span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out the </span><a href=\"https://gist.github.com/awilson28/f6721ffe00f101a10359\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Default Binding</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> gist</span></p><br><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">When you feel comfortable with these rules, check out some common foibles with implicit binding: </span><a href=\"https://gist.github.com/awilson28/5b56dae893d6684b63ce\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Implicitly Lost Binding</span></a><span style=\"font-size: 11pt; font-family: Arial; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> &amp; </span><a href=\"https://gist.github.com/awilson28/99d2202d9646dc3605a0\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Ignored This &amp; Indirect Referencing</span></a></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 18pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">4. THE DOM</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">The DOM is the product of the browser’s parsing of your HTML. It is also a tree-like object model that enables programmers to get, change, add, or delete HTML elements. When queried for nodes, the DOM returns array-like objects. Like arrays, array-like objects possess various numbered elements and a length property but they don’t have any of the methods defined on the Array prototype (think of the arguments array-like object that is available to every function). </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">Check out this </span><a href=\"https://gist.github.com/awilson28/6ecbdfbb8b254254e699\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">gist</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> on converting array-like objects into arrays and read </span><a href=\"http://www.unlikelycoder.com/\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">Why ‘Slice’ my arguments?: The Jazz Behind Array.prototype.slice()</span></a><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> by recent Fullstack graduate Ginna Baker (</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">NOTE: you’ll have to scroll down and click on ‘older posts’ to get to the blogpost</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">). &nbsp;</span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">To understand the DOM, we have to understand the browser. You just completed selector.js which means you have a pretty solid understanding of how the DOM must be traversed recursively. </span></p><br><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">We </span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-weight: 700; font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\">HIGHLY</span><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(0, 0, 0); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;\"> encourage all of you to spend some time reading this article (which is far better than the embedded video): </span></p><p dir=\"ltr\" style=\"line-height:1.38;margin-top:0pt;margin-bottom:0pt;margin-left: 36pt;\"><a href=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_browsers_we_will_talk_about\" style=\"text-decoration:none;\"><span style=\"font-size: 11pt; font-family: Consolas; color: rgb(17, 85, 204); font-variant-ligatures: normal; font-variant-east-asian: normal; font-variant-position: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;\">How Browsers Work</span></a></p><br><br><br></span>"
    }
  ]
}