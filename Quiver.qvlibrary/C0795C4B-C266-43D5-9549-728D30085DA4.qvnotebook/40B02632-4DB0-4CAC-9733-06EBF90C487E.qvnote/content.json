{
  "title": "How To Initialize Node, Express",
  "cells": [
    {
      "type": "markdown",
      "data": "## Initializing Node\n\n// Initializing the Node Project and cd into it\n    mkdir directoryName\n// start a git repo, add and commit\n    git init\n    git add -A\n    git commit -m 'first commit message\n// all node projects need a package.json, it describes the project, list dependencies, defines scripts. to generate: \n    npm init\n// a basic file structure\n    mkdir public public/stylesheets routes views\n    touch app.js public/stylesheets/style.css routes/views.js\n    touch views/index.html views/layout.html\n    \n*** app.js - will be our main application\n*** static (unchanging files) in public will be automatically served when requested\n*** files in routes and views will let us define dynamic content"
    },
    {
      "type": "markdown",
      "data": "## Installing Express\n\n// install express in terminal. check package.json to confirm express has been added\n    npm install express --save"
    },
    {
      "type": "markdown",
      "data": "## Gitignore\n\n// often npm packages contain thousands of files, to exclude certain files\n    touch .gitignore\n// exclude your node modules with:\n    node_modules"
    },
    {
      "type": "markdown",
      "data": "## Make an Application Instance\n\n// in app.js, require the express module by creating an APPLICATION INSTANCE by storing the instance in an app variable\n    const express = require('express');\n    const app = express(); // creates an instance of an express application"
    },
    {
      "type": "markdown",
      "data": "## Starting a Server\n\n// at the bottom of app.js, tell your app to listen for requests on port 3000 \n    app.get('/', function(req, res) {\n      res.send('Hello World')\n    })\n    app.listen(3000, function() {\n      console.log('listening on port 3000')\n    })"
    },
    {
      "type": "markdown",
      "data": "## Logging Middleware\n// logging middleware that will fire for every incoming request\n    app.use(function(req, res, next) {\n    // do your logging here\n    // call 'next' "
    },
    {
      "type": "markdown",
      "data": "## nodemon\n// instead of restarting the server after every change, install nodemon\n    npm install nodemon --save\n// run nodemon on file\n    nodemon app.js"
    },
    {
      "type": "markdown",
      "data": "## Templates\n// a templating engine is a program that renders final documents (e.g. HTML files) based on template. a template is an outline or plan for a document, which can be combined with data to complete it.\n    template file + locals object -> rendering function -> complete html\n    \n// nunjucks is available as a node module, install and require it\n    npm install nunjucks --save\n    var nunjucks = require('nunjucks');\n    \n// copy basic template into views/index.html\n// {{...}} tags are variables\n// {%...%} tags are logic tags\n// when we pass Nunjucks some data to render this view (local variables), it will interpolate (fill in) the values we want\n\n// using nunjucks.configure and nunjucks.render, make a simple script that uses your template to log out\n// in app.js\n\nvar locals = {\n  title: 'An Example',\n  people: [\n    { name: 'Gandalf' },\n    { name: 'Frodo' },\n    { name: 'Hermione' }\n  ]\n};\nnunjucks.configure('views', {noCache: true});\nnunjucks.render('index.html', locals, function (err, output) {\n  console.log(output);\n});"
    },
    {
      "type": "markdown",
      "data": "## Integrate Nunjuck's features in our Express app\n\n// app.engine - to use nunjucks.render as the function to actually render html\n// app.set - the default view engine to html (so we don't have to specify on every render)\n// nunjucks.configure - the views path to our views folder (where we store templates)\n\napp.set('view engine', 'html'); // have res.render work with html files\napp.engine('html', nunjucks.render); // when giving html files to res.render, tell it to use nunjucks\nnunjucks.configure('views'); // point nunjucks to the proper directory for template\n"
    }
  ]
}