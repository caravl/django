{
  "title": "Express",
  "cells": [
    {
      "type": "text",
      "data": "<h2><font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">What is Express?</font></h2><div><ul><li>A web application framework for Node</li><li>minimal and flexible</li><li>great for building <b>Web APIs</b></li><li><b>EXTENDS NODE.JS</b></li></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3>Installing Express</h3><div><ul><li>use <b>npm </b>to install the latest stable version</li><ul><li><code>​$ npm install express</code>​<br></li></ul></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3>Starting a Simple Web Application</h3><div><ul><li>calling the express function gives us an <b>application instance</b></li><li>the following code will create a simple web API server that accepts http requests from the root path and response with the string ‘Hello World’</li></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// Create a simple web API server that accepts http requests from the rooth path and responses with 'Hello World'\n\n// we request the express library\nvar express = require('express');\n\n// we get a function back, when we run that function, we get an application instance which we store in var app\nvar app = express();\n// on the app object, we can create functions that create routes\n\n// the get function creates a route that accepts http get requests\n// the callback function has a request and response object and uses response object to send back a server response 'Hello World'\napp.get('/', function(request, response) {\n  response.send('Hello World');\n});\n\n// bins the application to tcp port 3000\n// takes optional callback function, which is called once the app is ready to start taking requests, once server is up, it will console log\napp.listen(3000, function() {\n  console.log('Listening on port 3000');\n});"
    },
    {
      "type": "text",
      "data": "<h3>Start our Express App</h3><div><ul><li>start the server with the node command</li><ul><li><code>​$ node app.js</code><br></li></ul></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3>To Issue a Request to App</h3><div><code>​$ curl http://localhost:3000/</code><br></div><div><code>Hello World</code></div>"
    },
    {
      "type": "text",
      "data": "<h3>To Restart Server After Changes</h3><div><ul><li>Control + C<br></li></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3>Different Functions from Express and Node</h3>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// using Express API\nresponse.send\n\n// using Node API\nresponse.write('Hello World')\nresponse.end();\n\n// json function reads better when all we respond with is JSON\n// same response as send, for Objects and Arrays\nresponse.json(blocks)"
    },
    {
      "type": "text",
      "data": "<h3>Responding with JSON</h3><div><ul><li>the send function converts <b>Objects and Arrays </b>to JSON</li></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "\napp.get('/blocks', function(request, response) {\n  var blocks = ['fixed', 'movable', 'rotating'];\n  \n  // to serialize this array to JSON, is pass array to send function\n  // send function converts array to JSON, and send proper response headers automatically\n  response.send(blocks);\n});\n\ncurl -i http://localhost/3000\n// will return header and print the array"
    },
    {
      "type": "text",
      "data": "<h3>Redirect to Relative Path</h3><div><ul><li>the redirect function sets the proper response header</li></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "app.get('/blocks', function(request, response) {\n  response.redirect('/parts');\n});\n\n// to redirect with custom status code and move permanently\napp.get('/blocks', function(request, response) {\n  response.redirect(301, '/parts');\n})"
    },
    {
      "type": "text",
      "data": "Finish code school express&nbsp;<div><a href=\"http://campus.codeschool.com/courses/building-blocks-of-express-js/level/1/wrap-up\">http://campus.codeschool.com/courses/building-blocks-of-express-js/level/1/wrap-up</a><br></div>"
    },
    {
      "type": "text",
      "data": "<h2><font color=\"#323232\"><span style=\"background-color: rgb(254, 250, 0);\">How Middleware Works</span></font></h2><div><ul><li>building blocks of Express</li><li>allow for more interactive experience on the web</li><li>functions added to the stack that have access to the request and response object and are executed sequentially</li><li>express application is essentially a stack of middleware running one after the other</li></ul><div>Steps of Interacting with Web (uisng Express to build)</div></div><div><ol><li>Client requests info from Server</li><li>Server returns index.html</li><li>Client further request using JavaScript or AJAX</li><li>Server responds with data, typically JSON</li><li>Client uses that JSON to update elements on the page</li><ol><li>this way, interacting with application doesn’t result in full page reloads</li></ol></ol></div>"
    },
    {
      "type": "text",
      "data": "<h3>Steps Using Express</h3><div><ol><li>Writing index.html&nbsp;</li><ol><li>place HTML files under the public folder</li></ol><li>Sending files to render on browser using sendFile or middleware</li></ol></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// in app.js\nvar express = require('express');\nvar app = express();\n\n// serving files with sendFile\napp.get('/', function(request, response) {\n  response.sendFile(__dirname + '/public/index.html');\n})\n\n// alternatively, add middleware to serve files\n// the app.use function adds middleware to app stack\napp.use(express.static('public'));"
    },
    {
      "type": "text",
      "data": "<h3>Loading Data onto Browser</h3><div><ol><li>adding client-side JavaScript - place all files under the public folder</li><ol><li>public/index.html</li><li>jquery.js</li><li>Images</li><li>Client.js - client-side javascript</li></ol><li>all files that render on the browser are saved in public folder so they can be served by the static middleware</li><li>something in client.js</li><li>in app.js, create a new route for ‘/blocks'</li></ol></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// given an application instance is set to the app variable, use the function call app.use to mount a middleware called logger\napp.use(logger)"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// in app.js\n\n// creating an array of blocks and serializing it back to the client using the response.json function\napp.get('/blocks', function(request, response) {\n  var blocks = ['fixed', 'movable', 'rotating'];\n  response.json(blocks);\n})"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<h3>Writing Your Own Middleware</h3><div><ol><li>create a new file - logger.js in main folder</li><li>assign our logger function to module.exports in order to export it as a Node module and make it accessible from other files</li><li>our logger middleware will be called for each request for any routes</li><ol><li>track time with Date object</li></ol></ol></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// in new logger.js file\n// module.exports will export it as a Node module and make it accessible from other files\n\nmodule.exports = function(request, response, next) {\n  // start by creating the start time, and save variable\n  // + sign converts date Object to milliseconds since 1/1/1970\n  var start = +new Date();\n  \n  // assign the readable stream to be logged out\n  var stream = process.stdout;\n  \n  // reading the url and http method\n  // the request object gives us the requested url and http method used\n  var url = request.url;\n  var method = request.method;\n  \n  // must listen for the end of the request\n  // the response object is an EventEmiiter which can listen to events\n  response.on('finish', function() {\n    // calculate the duration of the request\n    var duration = +new Date() - start;\n    // create the message to be returned\n    var message = method + ' to ' + url + '\\ntook ' + duration + ' ms \\n\\n';\n    // prints the message\n    stream.write(message);\n  });\n  \n  // next moves request to the next middleware in stack\n  next();\n}\n\n// in app.js\n// we call logger and get back a middleware named logger\n// then add to the stack by passing it as an argument\nvar logger = require('./logger');\napp.use(logger);"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}