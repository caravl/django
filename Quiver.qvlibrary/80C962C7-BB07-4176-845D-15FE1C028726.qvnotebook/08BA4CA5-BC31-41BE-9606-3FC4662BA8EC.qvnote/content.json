{
  "title": "Workshop - Node-Postgres",
  "cells": [
    {
      "type": "text",
      "data": "<ul><li>must run npm install everytime you clone a git repo</li><li>npm start</li></ul>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// calling node-postgres(?)\nvar pg = require('pg');\n// setting our database as node-progres database (?)\nvar client = new pg.Client('postgres://localhost/twitterdb');\n// connect our database\nclient.connect();\n\nmodule.exports = client;\n\n// add database\nvar client = require('../db');\n// using express expression\nfunction respondwithAllTweets (req, res, next) {\n  // using sql query\n  client.query(SELECT * FROM tweets JOIN users WHERE tweets.user_id = users.id;', function(err, result) {\n    // .rows property returns metadata and all tweets\n    var allTheTweets = results.rows;\n    \n    res.render('index', {\n      title: 'Twitter.js';\n      tweets: allThe Tweets,\n      showForm: true;\n    })\n  }\n}\n\n// how would you recognize err handling in middleware\n// an error will become the first parameter, gets passed into express' build in error handling \n\n// we'll write our own error handling function\n// if (err) return next(err) ==== this will send the error to below function\napp.use(function(err, requ, res, next) {\n  console.log('Something terrible happened', err);\n  res.send('Something happened on our end');\n})\n"
    },
    {
      "type": "text",
      "data": "******* PULL WORKSHOP SOLUTION LIVE REVIEW CODE FROM LIBRARY<div>DOWNLOAD POSTICO</div>"
    }
  ]
}