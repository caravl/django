{
  "title": "Pre-Reading - Node.js",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"font-size: 21.5px;\"><span style=\"font-size: 18px;\">Node.js&nbsp;</span></h2><div><ul><li style=\"font-size: 16px;\">is a platform built in Chrome’s JavaScript runtime for easily building fast and scalable network applications</li><li style=\"font-size: 16px;\">uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distrubted devices</li><li style=\"font-size: 16px;\">Open source, cross-platform runtime environment for developing server-side and networking applications</li><li style=\"font-size: 16px;\">Written in JavaScript</li><li style=\"font-size: 16px;\">Provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent</li><li style=\"font-size: 16px;\">Node.js = Runtime Environment + JavaScript Library</li><li style=\"font-size: 16px;\">Features:&nbsp;</li><ul><li style=\"font-size: 16px;\">Asynchronous and Event Driven - <font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">a Node.js based server never waits for an API to return data. The server moves to the next API afer calling it and a notification mechanism of EVENTS of Node.js helps the server to get a response from previous API call</font></li><li style=\"font-size: 16px;\">Very Fast in code execution</li><li style=\"font-size: 16px;\">Single Threaded but Highly Scalable - <font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">uses a single threaded model with event looping. Event mechanism helps the server to respond in a non-blocking way, makes server highly scalable as opposed to traditional servers which create limited threads to handle requests.</font> Uses a single threaded program and the same program <font color=\"#323232\" style=\"background-color: rgb(254, 250, 0);\">can provide service to a much larger number of requests</font> that traditional servers like Apache HTTP Server</li><li style=\"font-size: 16px;\">No Buffering - never buffer any data, these applications simply output the data in chunks</li></ul><li><font size=\"3\">Where to use Node.js</font></li><ul><li><font size=\"3\">I/O bound Applications</font></li><li><font size=\"3\">Data Streaming Applications</font></li><li><font size=\"3\">Data Intensive Real-time Applications (DIRT)</font></li><li><font size=\"3\">JSON APIs based Applications</font></li><li><font size=\"3\">Single Page Applications</font></li></ul><li><font size=\"3\">Where NOT to use Node.js</font></li><ul><li><font size=\"3\">CPU intensive applications</font></li></ul></ul></div>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/BE39020637ABF46D3285E5B70D50E709.jpg\" alt=\"nodejs_concepts.jpg\" width=\"284\" height=\"237\"><div>Above diagram depicts some important parts of Node.js</div>"
    },
    {
      "type": "text",
      "data": "<h2>Execute a File</h2><div><ol><li>Create a js file named main.js&nbsp;</li><li>execute main.js in terminal</li></ol></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "/* code within main.js file */\nconsole.log(\"Hello World!\");"
    },
    {
      "type": "markdown",
      "data": "$ node main.js\nHello World!"
    },
    {
      "type": "text",
      "data": "<h2>Creating Node.js Application</h2><div><ul><li><span style=\"font-size: 15px;\">Import Required Module - load http module and store the returned HTTP instance into an http variable</span><br></li></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var http = require(\"http\");"
    },
    {
      "type": "text",
      "data": "<ul><li style=\"font-size: 15px;\">Create Server - use the created http instance and call http.createServer() method to create a server instance and then we bind it at port 8081 using listen method associated with the server instance. Pass it a function with parameters request and response</li><li><span style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">A Web&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">server</b><span style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">&nbsp;is a software program that maps URL requests from a Web client (typically a browser) to a resource that will handle the request and return a response to the client. The Web client and the Web&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">server</b><span style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">&nbsp;use&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">HTTP</b><span style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">&nbsp;to communicate over a TCP network. Apache is the most commonly used Web&nbsp;</span><b style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">server</b><span style=\"color: rgb(34, 34, 34); font-family: Roboto, arial, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">&nbsp;in the world.</span><br></li></ul>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// The below code is enough to create an HTTP server which listens, i.e., waits for a request over 8081 port on the local machine\n\nhttp.createServer(function (request, response) {\n  // Send the HTTP header\n  // HTTP Status: 200: OK\n  // Content Type: text/plain\n  response.writeHead(200, {'Content-Type': 'text/plain'});\n  \n  // Send the response body as \"Hello World\"\n  response.end('Hello World\\n');\n}).listen(8081);\n\n// Console will print the message\nconsole.log('Server running at http://127.0.0.1:8081');"
    },
    {
      "type": "text",
      "data": "<ul><li style=\"font-size: 15px;\">Testing Request &amp; Response - in terminal execute the main.js to start the server</li></ul>"
    },
    {
      "type": "markdown",
      "data": "$ node main.js\n// Expected response if server has started: \nServer running at http://127.0.0.1:8081/"
    },
    {
      "type": "text",
      "data": "<ul><li style=\"font-size: 15px;\">Make a Request to a Node.js Server - open http://127.0.0.1:8081/ in a browser and it should print Hello World<code>​</code></li></ul>"
    },
    {
      "type": "text",
      "data": "<h2>Node Package Manager (NPM)</h2><div><ul><li style=\"font-size: 15px;\">online repositories for node.js packages/modules which are searchable</li><li style=\"font-size: 15px;\">command line utility to install Node.js packages, do version management and dependency management</li><li style=\"font-size: 15px;\">​to install certain packages:&nbsp;</li><ul style=\"font-size: 15px;\"><li style=\"font-size: 16px;\"><code style=\"font-size: 14.699999809265137px;\">​$ npm install moduleName —save</code></li></ul><li style=\"font-size: 15px;\">​to install all required modules for a server / repository&nbsp;</li><ul><li style=\"font-size: 16px;\"><code style=\"font-size: 14.699999809265137px;\">$ npm install</code></li></ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"2\"><code>​</code><span style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​to uninstall certain modules:</span><br></font></li><ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\"><code style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​<span style=\"font-size: 17px;\">$&nbsp;</span></code><font size=\"2\" style=\"font-size: 15px;\">npm uninstall moduleName</font><br></font></li></ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"2\"><code style=\"font-size: 11.699999809265137px;\">​</code><span style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​to list all modules:</span></font></li><ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\"><code style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​<span style=\"font-size: 17px;\">$&nbsp;</span></code><font style=\"font-size: 15px;\">npm ls</font></font></li></ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\" size=\"2\"><code style=\"font-size: 11.699999809265137px;\">​</code><span style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​to update a module:</span></font></li><ul><li><font face=\"Menlo, Consolas, Ubuntu Mono, Monaco, source-code-pro, monospace\"><code style=\"font-family: -apple-system, Helvetica, Arial, sans-serif; font-size: 15px;\">​<span style=\"font-size: 17px;\">$&nbsp;</span></code><font style=\"font-size: 15px;\">npm update moduleName</font></font></li></ul></ul></div>"
    },
    {
      "type": "markdown",
      "data": "// to install express (famous Node.js web framework module)\n$ npm install express\n\n// to use express module in your js file:\nvar express = require('express');"
    },
    {
      "type": "text",
      "data": "<ul><li>Package.json</li><ul><li>is present in the root directory of any Node application/module and is used to define the properties of a package</li></ul></ul>"
    }
  ]
}