{
  "title": "Lecture",
  "cells": [
    {
      "type": "text",
      "data": "Write Tests First<div><ul><li>to make sure everthing works</li><ul><li>edge cases work</li></ul><li>they keep working</li><li>improve code quality</li><li>HAVE A GOAL</li><ul><li>forces us to describe our goal</li><li>forces us to use an interface before we invest time in creating it</li></ul></ul><div>What Makes a Good Test</div></div><div><ul><li><span style=\"color: rgb(221, 221, 221);\">Specific errors</span><br></li><li><font color=\"#cccccc\">Broken into small pieces</font><br></li><ul><li><font color=\"#cccccc\">give us specific errors</font></li><li><font color=\"#cccccc\">makes code quality of our test better</font></li><li><font color=\"#cccccc\">show different relationsion btw differnt uses of your code</font></li></ul><li><font color=\"#cccccc\">test should fail when code is broken (SPECIFIC)</font></li><li><font color=\"#cccccc\">test should pass when code is&nbsp;working (ACCURATE)&nbsp;</font></li><li><font color=\"#cccccc\">Test Driven Development</font></li><ul><li><font color=\"#cccccc\">write the test</font></li><li><font color=\"#cccccc\">watch it fail</font></li><li><font color=\"#cccccc\">make it pass (write the code)&nbsp;</font></li><li><font color=\"#cccccc\">refactor code&nbsp;</font></li></ul></ul><div><font color=\"#cccccc\">Best Tests to Write</font></div></div><div><ul><li><font color=\"#cccccc\">test edge cases</font></li></ul><div><font color=\"#cccccc\">What Shouldn’t Test</font></div></div><div><ul><li><font color=\"#cccccc\">code that’s not yours</font></li><ul><li><font color=\"#cccccc\">db.define is sequelize’s job</font></li></ul></ul><div><font color=\"#cccccc\">What’s Best to Test</font></div></div><div><ul><li><font color=\"#cccccc\">the return alue of pure functions (no side-effects, just returns what we want)</font></li><ul><li><font color=\"#cccccc\">Ease - 5 *</font><br></li><li><font color=\"#cccccc\">Value &nbsp;- 5 *</font><br></li></ul><li><font color=\"#cccccc\">database models</font></li><ul><li><font color=\"#cccccc\">ease - 4 *&nbsp;</font></li><li><font color=\"#cccccc\">value - 4 *</font></li></ul><li><font color=\"#cccccc\">Routes</font><br></li><ul><li><font color=\"#cccccc\">Ease - 3 *</font><br></li><li><font color=\"#cccccc\">Value - 3 *</font><br></li></ul><li><font color=\"#cccccc\">Views</font><br></li><ul><li><font color=\"#cccccc\">ease - 2 *</font></li><li><font color=\"#cccccc\">value - 3 *</font></li></ul></ul><div><font color=\"#cccccc\"><br></font></div></div><div><font color=\"#cccccc\">Test</font></div><div><ul><li><font color=\"#cccccc\">Mocha - test runner</font><br></li><li><font color=\"#cccccc\">chai -&nbsp;</font></li><li><font color=\"#cccccc\"><code>​npm install&nbsp;—-save-dev mocha</code></font></li>​saved in node_modules/.bin</ul><ul><br></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// npm test -- --watch\n\n// to test slugify function\nconst (slugify) = require('../models/page')\nconst Page \nconst chai = require('chai'),\n  {expect} = chai\nconst {ValidationError} = require('sequelize')\n\ndescribe ('slugify', () => {\n  it( 'slugifies '' into '', () => {\n    if (slugify('') !== '')\n      throw new Error\n    // below is given by chai, have to install and require\n    //expect(slugify('').to.eql(''))\n  })\n  \n  it( 'turns spaces into underscores', () => {\n    expect(slugify('hello world').to.eql('hello_world'))\n  })\n  \n  it( 'trims leading spaces', () => {\n    expect(slugify('   hello world')).to.eql(slugify('hello_world'))\n  })\n  \n  it( 'removes non-alphanumeric', () => {\n    expect(slugify('hello %(**^%')).to.eql(slugify('hello_world'))\n  })\n  \n})\n\n// to test page model\ndescribe('Page', () => {\n  \n  beforeEach(() => Page.destroy({truncate: true}))\n    \n  \n  it('requires a title', () => {\n    expect(Page.create((title:null)))\n      .to.be.rejectedWith\n    // npm install --save-dev chai-as-promised\n  })\n  \n  it('slugifies its title into urlTitle', () => {\n    expect(Page.create((title:'hello world')))\n      .to.eventually.have.Property('urlTitle', slugify('hello world'))\n    // npm install --save-dev chai-as-promised\n  })\n  \n  describe('.createWithAuthor', () => {\n    it('accepts author-name and author-email', () => {\n      Page.createWithAuthor({\n        'title': \"ashi's post\",\n        'author-email': 'ni@ashi.io',\n        'author-name': 'ashi'\n      })\n    })\n    \n    it('creates and associates a new author with the Post', () => {\n      \n    })\n    \n    it('associates an existing author with the Post', () => {\n      \n    })\n    \n  })\n  \n  \n  \n  \n  })\n})\n\n"
    }
  ]
}