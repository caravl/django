{
  "title": "2. Express",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// EXPRESS\n\n// express is a library that allows us to easily handle requests that come into a node server, in an organized way\n\n// to create a server using Node\nvar http = require('http');\nvar server = http.createServer();\n\n// adding express to handle requests to Node server\nvar express = require('express'); // require the express library\nvar app = express(); // create an express app\n\n// when server receives a request, it's going to emit an event\n// the callback function (app) will receive req (request obj) and res (response object)\n// by using express and creating app, it becomes more easy and organized\nserver.on('request', app);\n\napp.get('/', function(req, res) {\n  res.send('Hello!');\n})\n\n// tell server to listen on a specific port\nserver.listen(3000);"
    },
    {
      "type": "text",
      "data": "<hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// EXPRESS REPLACING HTTP & HOW TO BUILDING ROUTES\n\n// express' .listen replaces var http, var server, server.listen and server.on. express isn't creating the server it replaced, it creates a function that receives the requests\n\n// the below remains, while we replace server.listen and server.on with app.listen\nvar express = require('express');\nvar app = express();\n// below .listen replaces creating servers and listening for an event\napp.listen(3000);\n\n\n// creating routes or paths \napp.get('/', function(req, res) {\n  res.send('Hello!');\n});\n// OR: specifying res.json tells express to respond with a json file (javascript object)\napp.get('/names', function(req, res) {\n  res.json('Hello!');\n});\n\n// the function only runs if there's a post request on the path '/submit'\napp.post('/submit', function(req, res) {\n  \n})"
    },
    {
      "type": "text",
      "data": "<hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// USING REQ.QUERY\n\n// req.query takes the string after '/' and returns anything after the word you're looking for\n// if a path is passed in with a query (/names/group), you can capture the query with req.query\napp.get('/names', function(req, res) {\n  // if the word 'group' isn't in the query, return an empty []\n  if (!req.query.group) {\n    res.json([]);\n  } else {\n    console.log(req.query);\n    // { group: whateverIsAfterTheWordGroup }\n  }\n});"
    },
    {
      "type": "text",
      "data": "<br><hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// USING REQ.PARAMS\n\n// req.params captures the entire string after '/' and sets it to that variable\n// the : in the path is important\n// http://localhost:3000/names/bananaOrangeAndOthers\napp.get('/names/:someString', function (req, res) {\n  console.log(req.params);\n  // this will log { someString: bananaOrangeAndOthers }\n})"
    },
    {
      "type": "text",
      "data": "<hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// MIDDLEWARE\n\n// think of your express application as a pipeline, and each request to your server goes through the pipeline\n// everything, including your route handlers are called middleware\n// if the request is a 'verb' request and it matches the path, invoke the function\n\n// to build a component in your pipeline that would run for every request regardless of method or path, use app.use\n// app.use takes a function, does something, and to pass it to the next middleware, include next\napp.use(function (req, res, next) {\n  req.prop = 'some value';\n  next(); // continues the request down the pipeline\n})\napp.get('/', function(req, res) {\n  res.send(req.prop);\n})\n// the browser will render 'some value' on the page\n\n// if you don't attach next to pass the request to an eventual response, you can add a setTimeout function that will force next within a set time\napp.use(function (req, res) {\n  req.anotherProp = 'another value';\n  setTimeout(function () {\n    next();\n  }, 1000); // this setTimeout function will run after 1 minute\n})"
    },
    {
      "type": "text",
      "data": "<hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// USING BUILT-IN MIDDLEWARE\n\n// there are 3rd party and built-in middleware that we can install to make things easier\n\n// middleware called static\n// we don't want to create a separate route for every file we have in our app file\n// based on the argument you pass it, it's going to return to you middleware that's going to read the url, if that url matches any file that exists in the directory that you've given express static as an argument\napp.use(express.static(__dirname));\n// __dirname represents the directory \n"
    },
    {
      "type": "text",
      "data": "<hr>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// HANDLING ERROR\n\napp.get('/names', function(req, res, next) {\n  var group = req.query.group;\n  \n  if (!)\n})"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}