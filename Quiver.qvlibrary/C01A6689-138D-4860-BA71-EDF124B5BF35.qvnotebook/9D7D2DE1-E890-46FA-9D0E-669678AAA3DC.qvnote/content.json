{
  "title": "Study Guide",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"box-sizing: border-box; margin-bottom: 16px; line-height: 1.25; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(234, 236, 239); color: rgb(36, 41, 46); font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-ligatures: normal; orphans: 2; widows: 2; margin-top: 0px !important;\">Models</h2><ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><li style=\"box-sizing: border-box;\">Creating a&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">db</code>&nbsp;instance with&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">new Sequelize</code>&nbsp;and a connection string</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Creating models with db.define(modelname, fields, options)<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Specifying schema fields (attributes)</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Specifying attribute types, e.g. Sequelize.STRING</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Specifying attribute validations, e.g. allowNull</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Specifying attribute defaultValues<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Specifying model options<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Getters &amp; Setters (aka virtuals)</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Hooks, e.g. beforeValidate</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Class methods</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Instance methods</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\"><code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">this</code>&nbsp;value in options<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">getters: the instance</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">hooks: the model (instance is 1st arg of the hook func)</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Instance methods: instance</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Class methods: class</li></ul></li></ul></li></ul></li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Associating models, e.g.&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">hasOne</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">belongsTo</code>, etc.<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Which model has the foreignKey</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Which Sequelize model is given new methods</li></ul></li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Synchronizing models with&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">db.sync()</code>&nbsp;-- what does the option&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">force: true</code>&nbsp;do?</li></ul></li></ul><h2 style=\"box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; line-height: 1.25; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(234, 236, 239); color: rgb(36, 41, 46); font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><a href=\"https://gist.github.com/khumphrey/e525b7feced2d7acf1d041aca9b23168#routes\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-routes\" style=\"box-sizing: border-box; color: rgb(3, 102, 214); text-decoration: none; float: left; padding-right: 4px; margin-left: -20px; line-height: 1;\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routes</h2><ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2; margin-bottom: 0px !important;\"><li style=\"box-sizing: border-box;\">app.use vs app.all vs app.get vs app.post vs app.put vs app.delete</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">How to interact with data from the request<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">req.param vs req.query vs req.body (URI match vs&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">?</code>&nbsp;that Express parses vs&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">body-parser</code>, respectively)</li></ul></li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Using models in an Express app<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Exporting and requiring models</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Using a model within a route to query, creations, updates or deletions<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Model.create, instance.destroy, etc.</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">More complex queries<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Using $in, $ne, and other operators</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Using Eager Loading (the&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">include</code>&nbsp;syntax) to do joins (i.e. populate assocations)</li></ul></li></ul></li></ul></li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Handling asynchronicity (from Sequelize methods, but really any promises)<ul style=\"box-sizing: border-box; padding-left: 2em; margin-top: 0px; margin-bottom: 0px;\"><li style=\"box-sizing: border-box;\">Using&nbsp;<code style=\"box-sizing: border-box; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.0470588);\">next</code>&nbsp;with error handling</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Sending a response once the async data is fetched</li><li style=\"box-sizing: border-box; margin-top: 0.25em;\">Error handling middleware (4 parameters - error, request, response, next)</li></ul></li></ul>"
    }
  ]
}